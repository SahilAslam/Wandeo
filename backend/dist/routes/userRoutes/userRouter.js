"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = require("../../controllers/userController/userController");
const eventController_1 = require("../../controllers/userController/eventController");
const authMiddleware_1 = require("../../middlewares/authMiddleware");
const profileController_1 = require("../../controllers/userController/profileController");
const groupController_1 = require("../../controllers/userController/groupController");
const groupDiscussionController_1 = require("../../controllers/userController/groupDiscussionController");
const hostingController_1 = require("../../controllers/userController/hostingController");
const tripController_1 = require("../../controllers/userController/tripController");
const searchController_1 = require("../../controllers/userController/searchController");
const referenceController_1 = require("../../controllers/userController/referenceController");
const chatController_1 = require("../../controllers/chatController/chatController");
const friendsController_1 = require("../../controllers/userController/friendsController");
const inboxController_1 = require("../../controllers/userController/inboxController");
const userRouter = express_1.default.Router();
userRouter.post("/signup", userController_1.userSignup);
userRouter.post("/login", userController_1.userLogin);
userRouter.post("/createuserinfo/:userId", userController_1.createUserInfo);
userRouter.post("/auth/google", userController_1.googleSignup);
userRouter.post("/googleLogin", userController_1.googleLogin);
userRouter.post('/forgotPassword', userController_1.sendPasswordLink);
userRouter.post("/otp_verify", userController_1.verifyForgetPassword);
userRouter.post("/newpassword", userController_1.newPassword);
userRouter.put("/logout", authMiddleware_1.protect, userController_1.userLogout);
userRouter.get("/sample", (req, res) => {
    console.log("Raja");
    console.log(process.env.EMAIL, "a;lksdjf;alkjsdf;laksjf;lkajfds");
    return res.send({ data: process.env.JWT_SECRET, ful: "simple" });
});
userRouter.post("/createEvent/:id", authMiddleware_1.protect, eventController_1.createUserEvent);
userRouter.get("/getEvent", authMiddleware_1.protect, eventController_1.getUserEvent);
userRouter.get("/joinEvent/:eventId", authMiddleware_1.protect, eventController_1.joinUserEvent);
userRouter.get("/leaveEvent/:eventId", authMiddleware_1.protect, eventController_1.leaveUserEvent);
userRouter.get("/attendingEvents/:id", authMiddleware_1.protect, eventController_1.eventUsersAttending);
userRouter.get("/eventDetails/:id", authMiddleware_1.protect, eventController_1.getEventDetailedPage);
userRouter.get("/profile/:userId", authMiddleware_1.protect, profileController_1.getUserProfile);
userRouter.post("/editUser/:userId", authMiddleware_1.protect, profileController_1.editUserProfile);
userRouter.post("/addImage/:userId", authMiddleware_1.protect, profileController_1.addProfileImage);
userRouter.post("/hostingform/:userId", authMiddleware_1.protect, hostingController_1.createHostingFacility);
userRouter.get("/getHostingPref/:userId", authMiddleware_1.protect, hostingController_1.getHostingFacility);
userRouter.post("/addpropimg", authMiddleware_1.protect, profileController_1.propertyImage);
userRouter.post("/createGroup/:id", authMiddleware_1.protect, groupController_1.createUserGroup);
userRouter.get("/getGroups", authMiddleware_1.protect, groupController_1.getUserGroup);
userRouter.get("/getPopularGroups", authMiddleware_1.protect, groupController_1.getPopularGroup);
userRouter.get("/groupDetailedPage/:groupId", authMiddleware_1.protect, groupController_1.getGroupDetailedPage);
userRouter.patch("/joinGroup/:groupId", authMiddleware_1.protect, groupController_1.joinUserGroup);
userRouter.patch("/leaveGroup/:groupId", authMiddleware_1.protect, groupController_1.leaveUserGroup);
userRouter.get("/joinedGroups/:userId", authMiddleware_1.protect, groupController_1.userJoinedGroup);
userRouter.post("/createDiscussion/:groupId", authMiddleware_1.protect, groupDiscussionController_1.createNewDiscussion);
userRouter.get("/getDiscussion/:discussionId", authMiddleware_1.protect, groupDiscussionController_1.getSingleDiscussion);
userRouter.post("/discussionReply/:discussionId", authMiddleware_1.protect, groupDiscussionController_1.postDiscussionReply);
userRouter.delete("/deleteGroup/:groupId", authMiddleware_1.protect, groupController_1.deleteUserGroup);
userRouter.post("/createPublicTrip/:userId", authMiddleware_1.protect, tripController_1.createPublicTrip);
userRouter.get("/getPublicTrips", authMiddleware_1.protect, tripController_1.getPublicTrips);
userRouter.get("/getotherstrips/:id", authMiddleware_1.protect, tripController_1.getOtherUserTrips);
userRouter.get("/searchGroup", authMiddleware_1.protect, searchController_1.listGroups);
userRouter.get("/findHosts", authMiddleware_1.protect, searchController_1.listHostingUsers);
userRouter.get("/findUser", authMiddleware_1.protect, searchController_1.getSearchedUsers);
userRouter.get("/findTravelers", authMiddleware_1.protect, searchController_1.fetchTavelers);
userRouter.post("/addReference/:targettedUserId", authMiddleware_1.protect, referenceController_1.createReference);
userRouter.post("/addFriend", authMiddleware_1.protect, friendsController_1.addFriend);
userRouter.get("/getFriends", authMiddleware_1.protect);
userRouter.post("/hostuser/:targettedUserId", authMiddleware_1.protect, hostingController_1.hostAUser);
userRouter.post("/requestauser/:targettedUserId", authMiddleware_1.protect, hostingController_1.requestForHosting);
userRouter.post("/sendSimpleMessage/:chatId", authMiddleware_1.protect, hostingController_1.sendSimpleMessage);
userRouter.get('/findexhostingchat/:id', authMiddleware_1.protect, hostingController_1.findExistingHostingChat);
userRouter.get("/gethostingmessages", authMiddleware_1.protect, inboxController_1.getHostingMessage);
userRouter.get("/singlehostingmessage/:chatId", authMiddleware_1.protect, inboxController_1.getSingleHostingMessage);
userRouter.post("/sendresponse/:chatId", authMiddleware_1.protect, inboxController_1.sendResponse);
userRouter.post("/createmessage/:targettedUserId", authMiddleware_1.protect, inboxController_1.createDirectMessage);
userRouter.get("/getdirectmessage", authMiddleware_1.protect, inboxController_1.getDirectMessages);
userRouter.get('/messagedetailedpage/:chatId', authMiddleware_1.protect, inboxController_1.getSingleDirectMessage);
userRouter.put("/sendmessage/:chatId", authMiddleware_1.protect, inboxController_1.sendDirectMessage);
userRouter.get('/findexistingchat/:id', authMiddleware_1.protect, inboxController_1.findExistingChat);
userRouter.post("/chat", authMiddleware_1.protect, chatController_1.accessChat);
userRouter.get("/getChat", authMiddleware_1.protect, chatController_1.fetchChat);
userRouter.post('/chatSend', authMiddleware_1.protect, chatController_1.sendMessage);
userRouter.get('/viewMessages/:chatId', authMiddleware_1.protect, chatController_1.showAllMessages);
exports.default = userRouter;
